 [
    {
        "description": "Use type hints in function definition",
        "correct": "def greet(name: str) -> str:\n    return f'Hello, {name}!'",
        "incorrect": "def greet(name):\n    return f'Hello, {name}!'",
        "valid": "def add(a: int, b: int) -> int:\n    return a + b"
    },
    {
        "description": "Use the `async` keyword to define a coroutine",
        "correct": "async def fetch_data():\n    return 'data'",
        "incorrect": "def fetch_data():\n    return 'data'",
        "valid": "async def read_file():\n    print('Reading file...')"
    },
    {
        "description": "Use the `await` keyword",
        "correct": "async def fetch():\n    result = await fetch_data()",
        "incorrect": "async def fetch():\n    result = fetch_data()",
        "valid": "async def calculate():\n    total = await compute()"
    },
    {
        "description": "Create a custom metaclass",
        "correct": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['added_attr'] = True\n        return super().__new__(cls, name, bases, dct)",
        "incorrect": "class Meta:\n    def __new__(cls, name, bases, dct):\n        return super().__new__(cls, name, bases, dct)",
        "valid": "class MyClass(metaclass=Meta):\n    pass"
    },
    {
        "description": "Use a custom exception class",
        "correct": "class CustomError(Exception):\n    pass",
        "incorrect": "class CustomError:\n    pass",
        "valid": "class InvalidInputError(Exception):\n    def __init__(self, message):\n        self.message = message"
    },
    {
        "description": "Use a set intersection",
        "correct": "common = set1 & set2",
        "incorrect": "common = set1 and set2",
        "valid": "intersection = {1, 2, 3} & {2, 3, 4}"
    },
    {
        "description": "Use the `@classmethod` decorator",
        "correct": "class MyClass:\n    @classmethod\n    def create(cls):\n        return cls()",
        "incorrect": "class MyClass:\n    def create(cls):\n        return cls()",
        "valid": "class Config:\n    @classmethod\n    def load(cls):\n        return cls()"
    },
    {
        "description": "Use the `dataclass` decorator",
        "correct": "from dataclasses import dataclass\n@dataclass\nclass Point:\n    x: int\n    y: int",
        "incorrect": "class Point:\n    x: int\n    y: int",
        "valid": "@dataclass\nclass Rectangle:\n    width: int\n    height: int"
    },
    {
        "description": "Use the `@staticmethod` decorator",
        "correct": "class Utility:\n    @staticmethod\n    def add(a, b):\n        return a + b",
        "incorrect": "class Utility:\n    def add(a, b):\n        return a + b",
        "valid": "class Math:\n    @staticmethod\n    def square(x):\n        return x**2"
    },
    {
        "description": "Use a nested list comprehension",
        "correct": "pairs = [(x, y) for x in range(3) for y in range(2)]",
        "incorrect": "pairs = [(x, y) for x in range(3) y in range(2)]",
        "valid": "matrix = [[x * y for y in range(3)] for x in range(3)]"
    },
    {
        "description": "Use the `is` operator for identity comparison",
        "correct": "if a is b:\n    print('Same object')",
        "incorrect": "if a == b:\n    print('Same object')",
        "valid": "if obj1 is obj2:\n    print('Identical')"
    },
    {
        "description": "Use a ternary conditional expression",
        "correct": "result = 'Yes' if x > 5 else 'No'",
        "incorrect": "result = if x > 5: 'Yes' else: 'No'",
        "valid": "status = 'Active' if is_active else 'Inactive'"
    },
    {
        "description": "Use the `all()` function",
        "correct": "if all([True, True, False]):\n    print('All True')",
        "incorrect": "if [True, True, False].all():\n    print('All True')",
        "valid": "all_valid = all(x > 0 for x in [1, 2, 3])"
    },
    {
        "description": "Use the `any()` function",
        "correct": "if any([False, True, False]):\n    print('At least one True')",
        "incorrect": "if [False, True, False].any():\n    print('At least one True')",
        "valid": "contains_positive = any(x > 0 for x in [-1, 0, 1])"
    },
    {
        "description": "Use the `zip` function",
        "correct": "zipped = zip([1, 2], ['a', 'b'])",
        "incorrect": "zipped = zip([1, 2]['a', 'b'])",
        "valid": "pairs = list(zip([1, 2, 3], ['x', 'y', 'z']))"
    },
    {
        "description": "Use dictionary unpacking",
        "correct": "merged = {**dict1, **dict2}",
        "incorrect": "merged = dict1 + dict2",
        "valid": "new_dict = {**defaults, 'key': 'value'}"
    },
    {
        "description": "Sort a list in reverse order",
        "correct": "sorted_list = sorted([3, 1, 4], reverse=True)",
        "incorrect": "sorted_list = [3, 1, 4].sort(reverse=True)",
        "valid": "numbers = sorted([5, 3, 1], reverse=True)"
    },
    {
        "description": "Use `enumerate` in a loop",
        "correct": "for idx, value in enumerate(my_list):\n    print(idx, value)",
        "incorrect": "for idx, value in enumerate:\n    print(idx, value)",
        "valid": "for i, char in enumerate('abc'):\n    print(i, char)"
    },
    {
        "description": "Use the `@contextmanager` decorator",
        "correct": "from contextlib import contextmanager\n@contextmanager\ndef my_context():\n    yield",
        "incorrect": "def my_context():\n    yield",
        "valid": "from contextlib import contextmanager\n@contextmanager\ndef open_connection():\n    yield"
    },
    {
        "description": "Use the `Counter` class",
        "correct": "from collections import Counter\ncounts = Counter(['a', 'b', 'a'])",
        "incorrect": "from collections import Counter\ncounts = Counter({'a': 2, 'b': 1})",
        "valid": "counts = Counter('hello world')"
    },
    {
        "description": "Use the `defaultdict` class",
        "correct": "from collections import defaultdict\nd = defaultdict(list)",
        "incorrect": "from collections import defaultdict\nd = {}",
        "valid": "d = defaultdict(int)"
    },
    {
        "description": "Use the `deque` class",
        "correct": "from collections import deque\nqueue = deque([1, 2, 3])",
        "incorrect": "from collections import deque\nqueue = [1, 2, 3]",
        "valid": "stack = deque()"
    },
    {
        "description": "Use `itertools.combinations`",
        "correct": "from itertools import combinations\npairs = combinations([1, 2, 3], 2)",
        "incorrect": "pairs = combinations([1, 2, 3], 2)",
        "valid": "from itertools import combinations\ncombos = list(combinations('abc', 2))"
    },
    {
        "description": "Use `itertools.chain`",
        "correct": "from itertools import chain\ncombined = chain([1, 2], [3, 4])",
        "incorrect": "combined = chain([1, 2], [3, 4])",
        "valid": "from itertools import chain\nflattened = list(chain([1, 2], [3, 4]))"
    }
]
